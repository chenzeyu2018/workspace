<?xml version="1.0" encoding="UTF-8" ?>  
<!DOCTYPE mapper PUBLIC "-//ibatis.apache.org//DTD Mapper 3.0//EN"      
 "http://ibatis.apache.org/dtd/ibatis-3-mapper.dtd">


<mapper namespace="cn.tedu.store.mapper.UserMapper">
<!-- 根据执行的SQL种类选择节点 -->
<!-- id是抽象方法的名称 -->
<!--parameterType是：抽象方法的参数类型  -->
<!-- SQL语句结束不需要分号 -->
<!--useGeneratedKeys="true" 获取自增长的建
 keyProperty="id"  表示建的属性名，即对应类中的属性名 -->
 
 <!-- 插入数据 -->
 <!--Integer inserUser(User user);  -->
<insert id="inserUser" parameterType="cn.tedu.store.entity.User" useGeneratedKeys="true" keyProperty="id">
INSERT INTO T_USER (
id,username,password,salt,gender
,phone,email,avatar,is_delete,
created_user,created_time,modified_user
,modified_time 
) VALUES(
#{id},#{username},#{password},#{salt},#{gender},
#{phone},#{email},#{avatar},#{isDelete},#{createdUser},
#{createdTime},#{modifiedUser},#{modifiedTime}
)
</insert>

<!-- 查询 
查询必须制定:resultType(resultMap替换也可以)
该type是方法返回值的类型
-->
<!-- 指定用户名查询 -->
<!-- User findByUsername(String username); -->
<select id="findByUsername" resultType="cn.tedu.store.entity.User">
SELECT 
id,username,password,salt,avatar,is_delete isDelete
FROM T_USER 
WHERE USERNAME=#{username}
</select>


<!-- 查询全部用户 -->
<!--
	List<User> findall(); 
	
	private int id;
	private String username;
	private String password;
	private String salt;
	private int gender;
	private String phone;
	private String email;
	private String avatar;
	private int isDelete;
	private String created_user;
	private Data created_time;
	private String modified_user;
	private Data modified_time;-->
<select id="findall" resultType="cn.tedu.store.entity.User">
SELECT 
id,username,password,salt,gender
,phone,email,avatar,is_delete AS isDelete,
created_user createdUser,created_time createdTime,modified_user modifiedUser
,modified_time modifiedTime
FROM T_USER
</select>



<!-- 根据id查询password和盐值 -->
<!-- 	User selectFromId(); -->
<select id="selectFromId" resultType="cn.tedu.store.entity.User" >
SELECT 
username,password,gender,avatar
,phone,email,salt,is_delete AS isDelete
FROM 
t_user
Where id = #{id}


</select>

<!-- 修改密码 -->
<!-- 
	Integer updatePassword(@Param("password")String password,@Param("modifiedUser")String modifiedUser
	,@Param("modifiedTime")String modifiedTime,@Param("id")Integer id); -->
<update id="updatePassword" >
UPDATE 
t_user
SET
password=#{password},modified_user=#{modifiedUser},modified_time=#{modifiedTime}
WHERE id=#{id}

</update>




<!-- 资料修改 -->
<!-- /**
	 * 
	 * @param user
	 * @return
	 */
	Integer updataInfo(User user); -->
<update id="updataInfo" >
UPDATE 
t_user
SET
<if test="gender != null">
gender=#{gender},
</if>
<if test="phone != null">
phone=#{phone},
</if>
<if test="email != null">
email=#{email},
</if>

modified_user=#{modifiedUser},
modified_time=#{modifiedTime}
WHERE id=#{id}

</update>

<!-- Integer updateAvatar(@Param("id")Integer id,@Param("avatar")String avatar,
			@Param("modifiedUser")String modifiedUser,@Param("modifiedTime")Date modifiedTime); -->
<update id="updateAvatar">
UPDATE
t_user
SET
<if test="avatar != null">
avatar=#{avatar},
</if>

modified_user=#{modifiedUser},
modified_time=#{modifiedTime}
WHERE
ID=#{id}

</update>




</mapper>
